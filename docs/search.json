[{"path":"https://rgzn.github.io/beastr/articles/a_Introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"1. Introduction","text":"Help idea document goes data need assemble database. likely data already, may correct formats. goal give user idea principled way organize data. Unfortunately, assembling, formatting, organizing data steps can automated. example files part package, live subdirectories : directory structure therein represents one (many) possibly ways structure data directories. run document .Rmd source, code sections like can run computer. sections, like specified automatically evaluate. like information RMarkdown, just R general, please see vignette learning R.","code":"# not evaluated because it illustrates a directory on author's machine: system.file(\"\", package = \"beastr\")"},{"path":"https://rgzn.github.io/beastr/articles/a_Introduction.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"1. Introduction","text":"bother? anyone need database? data goes ? briefly try answer questions . Wildlife telemetry data collected placing devices field directly subject animals. devices record data GPS fixes, activity logs, photos, etc. want store access information recorded devices, information intrinsic devices (serial #, weight, etc) animals (species, age, zodiac sign, etc). maintain data validity, can use separate tables store type data, link tables together analyses. prevents us things like store information Ricky Weasel (eg. Favorite Food: Squirrel) twenty thousand records accelerometer collar. principle storing piece information called atomicity key preventing data mismatches records added changed. motivation, please see book inspired design: Spatial Database GPS Wildlife Tracking Data https://doi.org/10.1007/978-3-319-03743-1 basic principles database theory: ACID lastly, database backend admittedly tedious, essential processing data, guides: Telemetry Database Data Entry Wildlife Telemetry Quality Control Exploring Fisher Collar Data","code":""},{"path":"https://rgzn.github.io/beastr/articles/a_Introduction.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"Data Requirements","title":"1. Introduction","text":"even dealing ? build new database, need assemble basic info flat text files. hardest part whole process, scripted. Telemetry Data: guide deals data Lotek telemetry devices. principles architecture may extended devices, new data parsing code required. assumes data processed Lotek software can saved Lotek’s text file format. files produced using Lotek’s proprietary software. look like tab-delimitted text files, crucial differences. Let’s take look example file: may notice small details make file slightly difficult. empty fields, dedicated delimiter separate . date/time fields standard formats coordinate reference system specified. Also crucial information (Device ID) specified filename. want use data, import R read_lotek() function: Now tidy spatial data, can spatial manipulation .  Telemetry devices may sensors well. example “activity” data. records records -board accelerometer aggregated measure called Overall Dynamic Body Acceleration (ODBA). records recorded different schedule GPS fixes, must stored separately. , Lotek uses file format almost standard csv, quite, ’ll need use function read_lotek_activity() package: {TODO}: Add support input file formats. can done becomes necessary new devices. preserve data, records different fields different types devices stored different tables. crucial information joined together single VIEW using deployments table. Device Data: Beyond data recorded telemetry devices, also want store information devices . includes things like serial number, manufacturer, attachment type, etc. data tied device vary individual samples recorded device. data automatically come device, needs manually assembled one CSV/spreadsheets. ’s example looks like: case, one list devices. others wanted combine, search using fs: Animal Data: whole reason learn animals. need store information ! lot know animals come telemetry device, need compile . , one ormore flat CSV/spreadsheets. ’s example looks like, time ’re reading multiple files : Deployment Data: Animal telemetry devices deployed animals, animals may multiple devices, devices often record data even deployed. order properly tie various recorded data animals, need store deployment info. key fields data : device_id, animal_id, in_service, out_service. fields, key understanding purpose data. , one flat CSV/spreadsheets. Example: {TODO}: Need add non-animal deployment table environmental ambient devices. spatial table. telemetry devices may record environmental data (weather stations) ambient data (like Acoustic Recording Units), tied specific animal. [YET IMPLEMENTED]","code":"# Example Lotek Telemetry data: lotek_file = system.file(\"lotek/PinPoint33452.txt\", package = \"beastr\") readr::read_lines(lotek_file, n_max = 10) #>  [1] \"Index         Status  Sats  RTC-date  RTC-time  FIX-date      FIX-time   Delta(s)     Latitude    Longitude  Altitude(m)    HDOP        eRes  Temperature(C)  Voltage(V)\" #>  [2] \"    1          Valid   4/4  21/11/23  21:38:46  21/11/23  21:38:47.183      1.183     37.67304   -119.64404      2191.00     2.1         0.2            11.5        3.85\" #>  [3] \"    2          Valid   4/4  21/11/23  21:45:23  21/11/23  21:45:24.383      1.383     37.67314   -119.64399      2191.00     2.3         0.3             8.5        3.85\" #>  [4] \"    3  NotEnoughSats   0/1  21/11/23  22:00:21                              1.000                                                                        5.5        3.80\" #>  [5] \"    4  NotEnoughSats   0/2  21/11/23  22:11:51                              0.960                                                                       11.5        3.80\" #>  [6] \"    5  NotEnoughSats   0/0  21/11/23  22:15:13                              0.950                                                                       13.5        3.80\" #>  [7] \"    6  NotEnoughSats   0/0  21/11/23  22:35:13                              0.880                                                                       15.0        3.80\" #>  [8] \"    7  NotEnoughSats   0/2  21/11/23  22:58:50                              0.810                                                                       23.5        3.80\" #>  [9] \"    8  NotEnoughSats   0/1  21/11/23  23:00:22                              0.800                                                                       23.0        3.80\" #> [10] \"    9  NotEnoughSats   0/1  21/11/23  23:15:15                              1.000                                                                       24.0        3.80\" lotek_data = read_lotek(lotek_file) head(lotek_data) #> Simple feature collection with 6 features and 16 fields (with 4 geometries empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 266812.4 ymin: 4172829 xmax: 266817.1 ymax: 4172840 #> Projected CRS: WGS 84 / UTM zone 11N #> # A tibble: 6 x 17 #>   device_id Index Status       Sats  `RTC-date` `RTC-time` `FIX-date` `FIX-time` #>   <chr>     <int> <chr>        <chr> <chr>      <time>     <chr>      <time>     #> 1 33452         1 Valid        4/4   21/11/23   21:38:46   21/11/23   21:38:47   #> 2 33452         2 Valid        4/4   21/11/23   21:45:23   21/11/23   21:45:24   #> 3 33452         3 NotEnoughSa~ 0/1   21/11/23   22:00:21   NA               NA   #> 4 33452         4 NotEnoughSa~ 0/2   21/11/23   22:11:51   NA               NA   #> 5 33452         5 NotEnoughSa~ 0/0   21/11/23   22:15:13   NA               NA   #> 6 33452         6 NotEnoughSa~ 0/0   21/11/23   22:35:13   NA               NA   #> # ... with 9 more variables: `Delta(s)` <dbl>, `Altitude(m)` <dbl>, HDOP <dbl>, #> #   eRes <dbl>, `Temperature(C)` <dbl>, `Voltage(V)` <dbl>, Ingest_Time <dttm>, #> #   geometry <POINT [m]>, time <dttm> ggplot(lotek_data) +    geom_sf() +   ggtitle(\"Some Points from a Lotek Collar\") # Starts as 2 columns, switches to 3, doesn't parse: system.file(\"lotek/activity33452.csv\", package = \"beastr\") %>%    readr::read_delim(delim = \",\", show_col_types = FALSE, n_max = 6) #> Warning: One or more parsing issues, see `problems()` for details #> # A tibble: 6 x 1 #>   `Product Type: Litetrack RF-40` #>   <chr>                           #> 1 Product ID: 33452               #> 2 Firmware Version: V8.107.0      #> 3 GMT Time,ODBA,Temperature [C]   #> 4 11/23/2021 9:40:00 PM,140,8.5   #> 5 11/23/2021 9:45:00 PM,10,7.0    #> 6 11/23/2021 9:50:00 PM,7,5.0  # Using beastr: system.file(\"lotek/activity33452.csv\", package = \"beastr\") %>%    read_lotek_activity() #> # A tibble: 4,321 x 4 #>    device_id time                 ODBA `Temperature [C]` #>    <chr>     <dttm>              <dbl>             <dbl> #>  1 33452     2021-11-23 21:40:00   140               8.5 #>  2 33452     2021-11-23 21:45:00    10               7   #>  3 33452     2021-11-23 21:50:00     7               5   #>  4 33452     2021-11-23 21:55:00    14               4.5 #>  5 33452     2021-11-23 22:00:00     7               4   #>  6 33452     2021-11-23 22:05:00     7               3.5 #>  7 33452     2021-11-23 22:10:00    96               7.5 #>  8 33452     2021-11-23 22:15:00   288              13   #>  9 33452     2021-11-23 22:20:00   405              19.5 #> 10 33452     2021-11-23 22:25:00    28              14   #> # ... with 4,311 more rows device_file = system.file(\"devices/collars.csv\", package = \"beastr\") readr::read_csv(device_file) %>% head(4) #> Rows: 33 Columns: 7 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr (5): Type, Make, Model, Antenna, Notes #> dbl (2): ID, VHF #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 4 x 7 #>       ID Type   Make    Model Antenna    VHF Notes #>    <dbl> <chr>  <chr>   <chr> <chr>    <dbl> <chr> #> 1  33465 collar Lotek   LT40  Internal  169. NA    #> 2  33448 collar Lotek   LT40  Internal  168. NA    #> 3 259181 collar Holohil MI-2M NA        169. NA    #> 4 259182 collar Holohil MI-2M NA        169. NA # Find all CSVs in the device directory: device_dir = system.file(\"devices\", package = \"beastr\") fs::dir_ls(device_dir, regexp = \"*.csv\", recurse = TRUE) #> C:/Users/jweissman/AppData/Local/Temp/1/RtmpIHiZgo/temp_libpath4bc81c4e63ef/beastr/devices/collars.csv animal_dir = system.file(\"animals\", package = \"beastr\") animal_files = fs::dir_ls(animal_dir, regexp = \"*.csv\", recurse = TRUE) readr::read_csv(animal_files)  #> Rows: 18 Columns: 5 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr (5): ID, AgeClass, GeneralArea, Sex, Species #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 18 x 5 #>    ID    AgeClass GeneralArea      Sex   Species #>    <chr> <chr>    <chr>            <chr> <chr>   #>  1 MF01  Adult    Elevenmile       F     PEPE    #>  2 MF02  Subadult GPR              F     PEPE    #>  3 MF03  Subadult GPR              F     PEPE    #>  4 MF04  Adult    Moss/ Hodgdon    F     PEPE    #>  5 MF04  Adult    Moss/ Hodgdon    F     PEPE    #>  6 MF05  Adult    Moss/Hazel Green F     PEPE    #>  7 MF06  Subadult Valley           F     PEPE    #>  8 MM01  Adult    Moss/Merced      M     PEPE    #>  9 MM02  Juvenile Summit           M     PEPE    #> 10 MM03  Juvenile Summit           M     PEPE    #> 11 MM04  Juvenile Summit           M     PEPE    #> 12 MM05  Adult    South Gate       M     PEPE    #> 13 MM06  Adult    Moss/Tuolumne    M     PEPE    #> 14 MM07  Subadult GPR              M     PEPE    #> 15 MM08  Adult    Elevenmile       M     PEPE    #> 16 MM09  Adult    Moss             M     PEPE    #> 17 MM10  Juvenile South Gate       M     PEPE    #> 18 MM11  Adult    GPR              M     PEPE deploy_file = system.file(\"deployments/deployments.csv\", package = \"beastr\") readr::read_csv(deploy_file) #> Rows: 20 Columns: 6 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr  (3): AnimalID, Start_Method, Stop_Method #> dbl  (1): DeviceID #> dttm (2): In_Service, Out_Service #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 20 x 6 #>    DeviceID AnimalID In_Service          Out_Service         Start_Method #>       <dbl> <chr>    <dttm>              <dttm>              <chr>        #>  1    33468 MM02     2021-10-17 15:35:00 NA                  capture      #>  2    33467 MM03     2021-10-18 16:19:00 NA                  capture      #>  3    33454 MM04     2021-10-19 15:46:00 2022-01-13 13:08:00 capture      #>  4    33508 MM05     2021-10-31 13:32:00 2022-02-09 12:55:00 capture      #>  5    33456 MF01     2021-11-19 14:03:50 NA                  capture      #>  6    33452 MF02     2021-11-23 14:53:00 2021-12-08 13:35:00 capture      #>  7    33459 MF03     2021-11-24 14:31:00 2022-02-12 14:45:00 capture      #>  8    33469 MM07     2021-11-24 18:33:00 NA                  capture      #>  9    33507 MM08     2021-11-24 18:18:00 2022-03-05 13:26:00 capture      #> 10    33506 MM09     2022-01-22 13:41:00 NA                  capture      #> 11    33465 MF04     2022-01-13 15:15:00 2022-02-14 12:24:00 capture      #> 12    33448 MF05     2022-01-15 14:38:00 NA                  capture      #> 13    33512 MM06     2021-10-31 15:35:00 2022-01-16 13:52:00 capture      #> 14    33510 MM06     2022-01-16 15:01:00 NA                  capture      #> 15    33463 MF06     2022-01-27 13:47:00 2022-02-19 15:30:00 capture      #> 16    33504 MM05     2022-02-09 13:31:00 NA                  capture      #> 17    33982 MM04     2022-02-14 13:57:00 NA                  capture      #> 18   259186 MF04     2022-03-02 13:08:00 NA                  capture      #> 19    33983 MM08     2022-03-05 14:16:00 NA                  capture      #> 20    33984 MM11     2022-03-07 13:28:00 NA                  capture      #> # ... with 1 more variable: Stop_Method <chr>"},{"path":"https://rgzn.github.io/beastr/articles/a_Introduction.html","id":"building-a-geopackage","dir":"Articles","previous_headings":"","what":"Building a Geopackage","title":"1. Introduction","text":"Now understand raw data formats, can run script README: may notice forgot import activity files. Let’s now, example adding extra layer existing database:","code":"# Use example source data fix_file = system.file(\"lotek/PinPoint33452.txt\", package = \"beastr\") device_file = system.file(\"devices/collars.csv\", package = \"beastr\") animal_file = system.file(\"animals/critters.csv\", package = \"beastr\") deploy_file = system.file(\"deployments/deployments.csv\", package = \"beastr\") activity_file = system.file(\"lotek/activity33452.csv\", package = \"beastr\")  # Create a path to a geopackage in a temporary directory: myDB = paste0(tempdir(check = TRUE), \"/\", \"example.gpkg\")  # Build a database build_database(fix_files = fix_file,                device_files = device_file,                animal_files = animal_file,                deployment_files = deploy_file,                dsn = myDB,                tz = \"US/Pacific\") #> Rows: 20 Columns: 6 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr  (3): AnimalID, Start_Method, Stop_Method #> dbl  (1): DeviceID #> dttm (2): In_Service, Out_Service #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning in clean_columns(as.data.frame(obj), factorsAsCharacter): Dropping #> column(s) RTC-time,FIX-time of class(es) hms;difftime,hms;difftime #> Warning: Missing values are always removed in SQL. #> Use `MIN(x, na.rm = TRUE)` to silence this warning #> This warning is displayed only once per session. #> Warning: Missing values are always removed in SQL. #> Use `MAX(x, na.rm = TRUE)` to silence this warning #> This warning is displayed only once per session.  # What layers are in there? sf::st_layers(myDB) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1        fixes         Point      468     14 WGS 84 / UTM zone 11N #> 2 animal_fixes         Point      462     12 WGS 84 / UTM zone 11N #> 3      devices            NA       33      7                  <NA> #> 4      animals            NA        4      5                  <NA> #> 5  deployments            NA       20      6                  <NA> activity_data = read_lotek_activity(activity_file) append_layer(data = activity_data,              dsn = myDB,              layer = \"activity\") #> Updating layer `activity' to data source `C:\\Users\\jweissman\\AppData\\Local\\Temp\\1\\RtmpSePVKo\\example.gpkg' using driver `GPKG' #> Writing 4321 features with 4 fields without geometries.  # a new layer: sf::st_layers(myDB) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1        fixes         Point      468     14 WGS 84 / UTM zone 11N #> 2 animal_fixes         Point      462     12 WGS 84 / UTM zone 11N #> 3      devices            NA       33      7                  <NA> #> 4      animals            NA        4      5                  <NA> #> 5  deployments            NA       20      6                  <NA> #> 6     activity            NA     4321      4                  <NA>"},{"path":"https://rgzn.github.io/beastr/articles/Introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"1. Introduction","text":"Help idea document goes data need assemble database. likely data already, may correct formats. goal give user idea principled way organize data. Unfortunately, assembling, formatting, organizing data steps can automated. example files part package, live subdirectories : directory structure therein represents one (many) possibly ways structure data directories. run document .Rmd source, code sections like can run computer. sections, like specified automatically evaluate. like information RMarkdown, just R general, please see vignette learning R.","code":"# not evaluated because it illustrates a directory on author's machine: system.file(\"\", package = \"beastr\")"},{"path":"https://rgzn.github.io/beastr/articles/Introduction.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"1. Introduction","text":"bother? anyone need database? data goes ? briefly try answer questions . Wildlife telemetry data collected placing devices field directly subject animals. devices record data GPS fixes, activity logs, photos, etc. want store access information recorded devices, information intrinsic devices (serial #, weight, etc) animals (species, age, zodiac sign, etc). maintain data validity, can use separate tables store type data, link tables together analyses. prevents us things like store information Ricky Weasel (eg. Favorite Food: Squirrel) twenty thousand records accelerometer collar. principle storing piece information called atomicity key preventing data mismatches records added changed. motivation, please see book inspired design: Spatial Database GPS Wildlife Tracking Data https://doi.org/10.1007/978-3-319-03743-1 basic principles database theory: ACID lastly, database backend admittedly tedious, essential processing data, guides: Telemetry Database Data Entry Wildlife Telemetry Quality Control Exploring Fisher Collar Data","code":""},{"path":"https://rgzn.github.io/beastr/articles/Introduction.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"Data Requirements","title":"1. Introduction","text":"even dealing ? build new database, need assemble basic info flat text files. hardest part whole process, scripted. Telemetry Data: guide deals data Lotek telemetry devices. principles architecture may extended devices, new data parsing code required. assumes data processed Lotek software can saved Lotek’s text file format. files produced using Lotek’s proprietary software. look like tab-delimitted text files, crucial differences. Let’s take look example file: may notice small details make file slightly difficult. empty fields, dedicated delimiter separate . date/time fields standard formats coordinate reference system specified. Also crucial information (Device ID) specified filename. want use data, import R read_lotek() function: Now tidy spatial data, can spatial manipulation .  Telemetry devices may sensors well. example “activity” data. records records -board accelerometer aggregated measure called Overall Dynamic Body Acceleration (ODBA). records recorded different schedule GPS fixes, must stored separately. , Lotek uses file format almost standard csv, quite, ’ll need use function read_lotek_activity() package: {TODO}: Add support input file formats. can done becomes necessary new devices. preserve data, records different fields different types devices stored different tables. crucial information joined together single VIEW using deployments table. Device Data: Beyond data recorded telemetry devices, also want store information devices . includes things like serial number, manufacturer, attachment type, etc. data tied device vary individual samples recorded device. data automatically come device, needs manually assembled one CSV/spreadsheets. ’s example looks like: case, one list devices. others wanted combine, search using fs: Animal Data: whole reason learn animals. need store information ! lot know animals come telemetry device, need compile . , one ormore flat CSV/spreadsheets. ’s example looks like, time ’re reading multiple files : Deployment Data: Animal telemetry devices deployed animals, animals may multiple devices, devices often record data even deployed. order properly tie various recorded data animals, need store deployment info. key fields data : device_id, animal_id, in_service, out_service. fields, key understanding purpose data. , one flat CSV/spreadsheets. Example: {TODO}: Need add non-animal deployment table environmental ambient devices. spatial table. telemetry devices may record environmental data (weather stations) ambient data (like Acoustic Recording Units), tied specific animal. [YET IMPLEMENTED]","code":"# Example Lotek Telemetry data: lotek_file = system.file(\"lotek/PinPoint33452.txt\", package = \"beastr\") readr::read_lines(lotek_file, n_max = 10) #>  [1] \"Index         Status  Sats  RTC-date  RTC-time  FIX-date      FIX-time   Delta(s)     Latitude    Longitude  Altitude(m)    HDOP        eRes  Temperature(C)  Voltage(V)\" #>  [2] \"    1          Valid   4/4  21/11/23  21:38:46  21/11/23  21:38:47.183      1.183     37.67304   -119.64404      2191.00     2.1         0.2            11.5        3.85\" #>  [3] \"    2          Valid   4/4  21/11/23  21:45:23  21/11/23  21:45:24.383      1.383     37.67314   -119.64399      2191.00     2.3         0.3             8.5        3.85\" #>  [4] \"    3  NotEnoughSats   0/1  21/11/23  22:00:21                              1.000                                                                        5.5        3.80\" #>  [5] \"    4  NotEnoughSats   0/2  21/11/23  22:11:51                              0.960                                                                       11.5        3.80\" #>  [6] \"    5  NotEnoughSats   0/0  21/11/23  22:15:13                              0.950                                                                       13.5        3.80\" #>  [7] \"    6  NotEnoughSats   0/0  21/11/23  22:35:13                              0.880                                                                       15.0        3.80\" #>  [8] \"    7  NotEnoughSats   0/2  21/11/23  22:58:50                              0.810                                                                       23.5        3.80\" #>  [9] \"    8  NotEnoughSats   0/1  21/11/23  23:00:22                              0.800                                                                       23.0        3.80\" #> [10] \"    9  NotEnoughSats   0/1  21/11/23  23:15:15                              1.000                                                                       24.0        3.80\" lotek_data = read_lotek(lotek_file) head(lotek_data) #> Simple feature collection with 6 features and 16 fields (with 4 geometries empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 266812.4 ymin: 4172829 xmax: 266817.1 ymax: 4172840 #> Projected CRS: WGS 84 / UTM zone 11N #> # A tibble: 6 x 17 #>   device_id Index Status       Sats  `RTC-date` `RTC-time` `FIX-date` `FIX-time` #>   <chr>     <int> <chr>        <chr> <chr>      <time>     <chr>      <time>     #> 1 33452         1 Valid        4/4   21/11/23   21:38:46   21/11/23   21:38:47   #> 2 33452         2 Valid        4/4   21/11/23   21:45:23   21/11/23   21:45:24   #> 3 33452         3 NotEnoughSa~ 0/1   21/11/23   22:00:21   NA               NA   #> 4 33452         4 NotEnoughSa~ 0/2   21/11/23   22:11:51   NA               NA   #> 5 33452         5 NotEnoughSa~ 0/0   21/11/23   22:15:13   NA               NA   #> 6 33452         6 NotEnoughSa~ 0/0   21/11/23   22:35:13   NA               NA   #> # ... with 9 more variables: `Delta(s)` <dbl>, `Altitude(m)` <dbl>, HDOP <dbl>, #> #   eRes <dbl>, `Temperature(C)` <dbl>, `Voltage(V)` <dbl>, Ingest_Time <dttm>, #> #   geometry <POINT [m]>, time <dttm> ggplot(lotek_data) +    geom_sf() +   ggtitle(\"Some Points from a Lotek Collar\") # Starts as 2 columns, switches to 3, doesn't parse: system.file(\"lotek/activity33452.csv\", package = \"beastr\") %>%    readr::read_delim(delim = \",\", show_col_types = FALSE, n_max = 6) #> Warning: One or more parsing issues, see `problems()` for details #> # A tibble: 6 x 1 #>   `Product Type: Litetrack RF-40` #>   <chr>                           #> 1 Product ID: 33452               #> 2 Firmware Version: V8.107.0      #> 3 GMT Time,ODBA,Temperature [C]   #> 4 11/23/2021 9:40:00 PM,140,8.5   #> 5 11/23/2021 9:45:00 PM,10,7.0    #> 6 11/23/2021 9:50:00 PM,7,5.0  # Using beastr: system.file(\"lotek/activity33452.csv\", package = \"beastr\") %>%    read_lotek_activity() #> # A tibble: 4,321 x 4 #>    device_id time                 ODBA `Temperature [C]` #>    <chr>     <dttm>              <dbl>             <dbl> #>  1 33452     2021-11-23 21:40:00   140               8.5 #>  2 33452     2021-11-23 21:45:00    10               7   #>  3 33452     2021-11-23 21:50:00     7               5   #>  4 33452     2021-11-23 21:55:00    14               4.5 #>  5 33452     2021-11-23 22:00:00     7               4   #>  6 33452     2021-11-23 22:05:00     7               3.5 #>  7 33452     2021-11-23 22:10:00    96               7.5 #>  8 33452     2021-11-23 22:15:00   288              13   #>  9 33452     2021-11-23 22:20:00   405              19.5 #> 10 33452     2021-11-23 22:25:00    28              14   #> # ... with 4,311 more rows device_file = system.file(\"devices/collars.csv\", package = \"beastr\") readr::read_csv(device_file) %>% head(4) #> Rows: 33 Columns: 7 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr (5): Type, Make, Model, Antenna, Notes #> dbl (2): ID, VHF #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 4 x 7 #>       ID Type   Make    Model Antenna    VHF Notes #>    <dbl> <chr>  <chr>   <chr> <chr>    <dbl> <chr> #> 1  33465 collar Lotek   LT40  Internal  169. NA    #> 2  33448 collar Lotek   LT40  Internal  168. NA    #> 3 259181 collar Holohil MI-2M NA        169. NA    #> 4 259182 collar Holohil MI-2M NA        169. NA # Find all CSVs in the device directory: device_dir = system.file(\"devices\", package = \"beastr\") fs::dir_ls(device_dir, regexp = \"*.csv\", recurse = TRUE) #> C:/Users/jweissman/AppData/Local/Temp/1/RtmpIHiZgo/temp_libpath4bc843096548/beastr/devices/collars.csv animal_dir = system.file(\"animals\", package = \"beastr\") animal_files = fs::dir_ls(animal_dir, regexp = \"*.csv\", recurse = TRUE) readr::read_csv(animal_files)  #> Rows: 18 Columns: 5 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr (5): ID, AgeClass, GeneralArea, Sex, Species #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 18 x 5 #>    ID    AgeClass GeneralArea      Sex   Species #>    <chr> <chr>    <chr>            <chr> <chr>   #>  1 MF01  Adult    Elevenmile       F     PEPE    #>  2 MF02  Subadult GPR              F     PEPE    #>  3 MF03  Subadult GPR              F     PEPE    #>  4 MF04  Adult    Moss/ Hodgdon    F     PEPE    #>  5 MF04  Adult    Moss/ Hodgdon    F     PEPE    #>  6 MF05  Adult    Moss/Hazel Green F     PEPE    #>  7 MF06  Subadult Valley           F     PEPE    #>  8 MM01  Adult    Moss/Merced      M     PEPE    #>  9 MM02  Juvenile Summit           M     PEPE    #> 10 MM03  Juvenile Summit           M     PEPE    #> 11 MM04  Juvenile Summit           M     PEPE    #> 12 MM05  Adult    South Gate       M     PEPE    #> 13 MM06  Adult    Moss/Tuolumne    M     PEPE    #> 14 MM07  Subadult GPR              M     PEPE    #> 15 MM08  Adult    Elevenmile       M     PEPE    #> 16 MM09  Adult    Moss             M     PEPE    #> 17 MM10  Juvenile South Gate       M     PEPE    #> 18 MM11  Adult    GPR              M     PEPE deploy_file = system.file(\"deployments/deployments.csv\", package = \"beastr\") readr::read_csv(deploy_file) #> Rows: 20 Columns: 6 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr  (3): AnimalID, Start_Method, Stop_Method #> dbl  (1): DeviceID #> dttm (2): In_Service, Out_Service #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 20 x 6 #>    DeviceID AnimalID In_Service          Out_Service         Start_Method #>       <dbl> <chr>    <dttm>              <dttm>              <chr>        #>  1    33468 MM02     2021-10-17 15:35:00 NA                  capture      #>  2    33467 MM03     2021-10-18 16:19:00 NA                  capture      #>  3    33454 MM04     2021-10-19 15:46:00 2022-01-13 13:08:00 capture      #>  4    33508 MM05     2021-10-31 13:32:00 2022-02-09 12:55:00 capture      #>  5    33456 MF01     2021-11-19 14:03:50 NA                  capture      #>  6    33452 MF02     2021-11-23 14:53:00 2021-12-08 13:35:00 capture      #>  7    33459 MF03     2021-11-24 14:31:00 2022-02-12 14:45:00 capture      #>  8    33469 MM07     2021-11-24 18:33:00 NA                  capture      #>  9    33507 MM08     2021-11-24 18:18:00 2022-03-05 13:26:00 capture      #> 10    33506 MM09     2022-01-22 13:41:00 NA                  capture      #> 11    33465 MF04     2022-01-13 15:15:00 2022-02-14 12:24:00 capture      #> 12    33448 MF05     2022-01-15 14:38:00 NA                  capture      #> 13    33512 MM06     2021-10-31 15:35:00 2022-01-16 13:52:00 capture      #> 14    33510 MM06     2022-01-16 15:01:00 NA                  capture      #> 15    33463 MF06     2022-01-27 13:47:00 2022-02-19 15:30:00 capture      #> 16    33504 MM05     2022-02-09 13:31:00 NA                  capture      #> 17    33982 MM04     2022-02-14 13:57:00 NA                  capture      #> 18   259186 MF04     2022-03-02 13:08:00 NA                  capture      #> 19    33983 MM08     2022-03-05 14:16:00 NA                  capture      #> 20    33984 MM11     2022-03-07 13:28:00 NA                  capture      #> # ... with 1 more variable: Stop_Method <chr>"},{"path":"https://rgzn.github.io/beastr/articles/Introduction.html","id":"building-a-geopackage","dir":"Articles","previous_headings":"","what":"Building a Geopackage","title":"1. Introduction","text":"Now understand raw data formats, can run script README: may notice forgot import activity files. Let’s now, example adding extra layer existing database:","code":"# Use example source data fix_file = system.file(\"lotek/PinPoint33452.txt\", package = \"beastr\") device_file = system.file(\"devices/collars.csv\", package = \"beastr\") animal_file = system.file(\"animals/critters.csv\", package = \"beastr\") deploy_file = system.file(\"deployments/deployments.csv\", package = \"beastr\") activity_file = system.file(\"lotek/activity33452.csv\", package = \"beastr\")  # Create a path to a geopackage in a temporary directory: myDB = paste0(tempdir(check = TRUE), \"/\", \"example.gpkg\")  # Build a database build_database(fix_files = fix_file,                device_files = device_file,                animal_files = animal_file,                deployment_files = deploy_file,                dsn = myDB,                tz = \"US/Pacific\") #> Rows: 20 Columns: 6 #> -- Column specification -------------------------------------------------------- #> Delimiter: \",\" #> chr  (3): AnimalID, Start_Method, Stop_Method #> dbl  (1): DeviceID #> dttm (2): In_Service, Out_Service #>  #> i Use `spec()` to retrieve the full column specification for this data. #> i Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning in clean_columns(as.data.frame(obj), factorsAsCharacter): Dropping #> column(s) RTC-time,FIX-time of class(es) hms;difftime,hms;difftime #> Warning: Missing values are always removed in SQL. #> Use `MIN(x, na.rm = TRUE)` to silence this warning #> This warning is displayed only once per session. #> Warning: Missing values are always removed in SQL. #> Use `MAX(x, na.rm = TRUE)` to silence this warning #> This warning is displayed only once per session.  # What layers are in there? sf::st_layers(myDB) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1        fixes         Point      468     14 WGS 84 / UTM zone 11N #> 2 animal_fixes         Point      462     12 WGS 84 / UTM zone 11N #> 3      devices            NA       33      7                  <NA> #> 4      animals            NA        4      5                  <NA> #> 5  deployments            NA       20      6                  <NA> activity_data = read_lotek_activity(activity_file) append_layer(data = activity_data,              dsn = myDB,              layer = \"activity\") #> Updating layer `activity' to data source `C:\\Users\\jweissman\\AppData\\Local\\Temp\\1\\RtmpQfzrDN\\example.gpkg' using driver `GPKG' #> Writing 4321 features with 4 fields without geometries.  # a new layer: sf::st_layers(myDB) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1        fixes         Point      468     14 WGS 84 / UTM zone 11N #> 2 animal_fixes         Point      462     12 WGS 84 / UTM zone 11N #> 3      devices            NA       33      7                  <NA> #> 4      animals            NA        4      5                  <NA> #> 5  deployments            NA       20      6                  <NA> #> 6     activity            NA     4321      4                  <NA>"},{"path":"https://rgzn.github.io/beastr/articles/LearningR.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics:","title":"Extra - Learning R","text":"want learn R? little coding experience want get started, new R data processing, online book great: Statistical Inference via Data Science https://moderndive.com/1-getting-started.html kinda familiar code, even coded old school base R extensively, new tidy R data science R, Hadley’s book definitive guide analyzing data R: R Data Science https://r4ds..co.nz/index.html resources listed tidyverse website.","code":""},{"path":"https://rgzn.github.io/beastr/articles/LearningR.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics:","title":"Extra - Learning R","text":"want get basic descriptive statistics (mean, variance, etc)? want make plots fit basic model? R Data Science, , covered. Ch 7 Exploratory Data Analysis Ch 22 Modeling want model data legit scientific use? Understand linear logistic regression? Use (actually understand) generalized additive models? far best resource statistical data analysis ’ve ever seen Cosma Shalizi’s: Advanced Data Analysis Elementary Point View https://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf texts either focus principles theory statistics, nitty gritty data analysis code. book stays focussed basics also demonstrating everything actual R code plots. one downside uses base R instead tidyverse stuff. However, familiar tidyverse stuff hard go two. largest difference base plot versus tidy ggplot. content book probably interest. certainly haven’t made whole thing. ’ll highlight sections ’ve found particularly useful : 1.1 Regression: Predicting Relating Quantitative Features 2.4 Linear Regression Philosopher’s Stone 3 Model Evaluation 8 Additive Models 12 Generalized Linear Models Generalized Additive Models think work whole book better statistics education majority professional data scientists.","code":""},{"path":"https://rgzn.github.io/beastr/articles/LearningR.html","id":"spatial-data","dir":"Articles","previous_headings":"","what":"Spatial Data:","title":"Extra - Learning R","text":"want make maps? spatial statistics? Explore movements? just found text Yeh Chia Jung, looks really nice. ’s basically -depth using sf package. illustrates use ggplot combination spatial data, also explains goes making data spatial. Spatial Analysis R https://chiajung-yeh.github.io/Spatial-Analysis/","code":""},{"path":"https://rgzn.github.io/beastr/articles/LearningR.html","id":"advanced-r-topics","dir":"Articles","previous_headings":"","what":"Advanced R topics:","title":"Extra - Learning R","text":"point writing tidy R code going get frustrated feel limited can . likely start trying write Python using R, loops . can work also get really messy, choose path, regret ever using R things easier faster started Python. Fortunately another path, Hadley guide us: Advanced R https://adv-r.hadley.nz/ built package realized hard reliably share R scripts analyzing telemetry data. much way putting telemetry data consistent self contained database allows share data maintain data consistency, putting R code package allows share code maintain reproducibility. Developing context R package different writing small one-scripts, huge benefits, past initial hurdles, add incredible amount overhead. book guide process: R Packages https://r-pkgs.org/","code":""},{"path":"https://rgzn.github.io/beastr/articles/LearningR.html","id":"rmarkdown","dir":"Articles","previous_headings":"","what":"RMarkdown","title":"Extra - Learning R","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. info write R Markdown really fancy stuff : R Markdown: Definitive Guide https://bookdown.org/yihui/rmarkdown/","code":""},{"path":"https://rgzn.github.io/beastr/articles/z_LearningR.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics:","title":"Extra - Learning R","text":"want learn R? little coding experience want get started, new R data processing, online book great: Statistical Inference via Data Science https://moderndive.com/1-getting-started.html kinda familiar code, even coded old school base R extensively, new tidy R data science R, Hadley’s book definitive guide analyzing data R: R Data Science https://r4ds..co.nz/index.html resources listed tidyverse website.","code":""},{"path":"https://rgzn.github.io/beastr/articles/z_LearningR.html","id":"statistics","dir":"Articles","previous_headings":"","what":"Statistics:","title":"Extra - Learning R","text":"want get basic descriptive statistics (mean, variance, etc)? want make plots fit basic model? R Data Science, , covered. Ch 7 Exploratory Data Analysis Ch 22 Modeling want model data legit scientific use? Understand linear logistic regression? Use (actually understand) generalized additive models? far best resource statistical data analysis ’ve ever seen Cosma Shalizi’s: Advanced Data Analysis Elementary Point View https://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf texts either focus principles theory statistics, nitty gritty data analysis code. book stays focussed basics also demonstrating everything actual R code plots. one downside uses base R instead tidyverse stuff. However, familiar tidyverse stuff hard go two. largest difference base plot versus tidy ggplot. content book probably interest. certainly haven’t made whole thing. ’ll highlight sections ’ve found particularly useful : 1.1 Regression: Predicting Relating Quantitative Features 2.4 Linear Regression Philosopher’s Stone 3 Model Evaluation 8 Additive Models 12 Generalized Linear Models Generalized Additive Models think work whole book better statistics education majority professional data scientists.","code":""},{"path":"https://rgzn.github.io/beastr/articles/z_LearningR.html","id":"spatial-data","dir":"Articles","previous_headings":"","what":"Spatial Data:","title":"Extra - Learning R","text":"want make maps? spatial statistics? Explore movements? just found text Yeh Chia Jung, looks really nice. ’s basically -depth using sf package. illustrates use ggplot combination spatial data, also explains goes making data spatial. Spatial Analysis R https://chiajung-yeh.github.io/Spatial-Analysis/","code":""},{"path":"https://rgzn.github.io/beastr/articles/z_LearningR.html","id":"advanced-r-topics","dir":"Articles","previous_headings":"","what":"Advanced R topics:","title":"Extra - Learning R","text":"point writing tidy R code going get frustrated feel limited can . likely start trying write Python using R, loops . can work also get really messy, choose path, regret ever using R things easier faster started Python. Fortunately another path, Hadley guide us: Advanced R https://adv-r.hadley.nz/ built package realized hard reliably share R scripts analyzing telemetry data. much way putting telemetry data consistent self contained database allows share data maintain data consistency, putting R code package allows share code maintain reproducibility. Developing context R package different writing small one-scripts, huge benefits, past initial hurdles, add incredible amount overhead. book guide process: R Packages https://r-pkgs.org/","code":""},{"path":"https://rgzn.github.io/beastr/articles/z_LearningR.html","id":"rmarkdown","dir":"Articles","previous_headings":"","what":"RMarkdown","title":"Extra - Learning R","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. info write R Markdown really fancy stuff : R Markdown: Definitive Guide https://bookdown.org/yihui/rmarkdown/","code":""},{"path":"https://rgzn.github.io/beastr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jon Weissman. Maintainer.","code":""},{"path":"https://rgzn.github.io/beastr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weissman J (2022). beastr: Better Environmental/Animal Sensor/Telemetry Repository. https://rgzn.github.io/beastr/, https://github.com/rgzn/beastr/.","code":"@Manual{,   title = {beastr: Better Environmental/Animal Sensor/Telemetry Repository},   author = {Jon Weissman},   year = {2022},   note = {https://rgzn.github.io/beastr/, https://github.com/rgzn/beastr/}, }"},{"path":"https://rgzn.github.io/beastr/index.html","id":"beastr","dir":"","previous_headings":"","what":"Better Environmental/Animal Sensor/Telemetry Repository","title":"Better Environmental/Animal Sensor/Telemetry Repository","text":"Better Environment/Animal Sensor Telemetry Repository “Better” “better nothing”. many solutions developed , notably Movebank. Also ’m just really bad naming things. goal beastr provide framework storing, accessing, processing wildlife telemetry data.","code":""},{"path":"https://rgzn.github.io/beastr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Better Environmental/Animal Sensor/Telemetry Repository","text":"can install package using devtools package","code":"devtools::install_github('rgzn/beastr')"},{"path":"https://rgzn.github.io/beastr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Better Environmental/Animal Sensor/Telemetry Repository","text":"Build database: View data linked animals, rather sensors:","code":"library(beastr, quietly = TRUE) library(sf, quietly = TRUE)  # Use example source data fix_file = system.file(\"lotek/PinPoint33452.txt\", package = \"beastr\") device_file = system.file(\"devices/collars.csv\", package = \"beastr\") animal_file = system.file(\"animals/critters.csv\", package = \"beastr\") deploy_file = system.file(\"deployments/deployments.csv\", package = \"beastr\") myDB = paste0(tempdir(check = TRUE), \"/\", \"example.gpkg\")  # Build a database build_database(fix_files = fix_file,                device_files = device_file,                animal_files = animal_file,                deployment_files = deploy_file,                dsn = myDB,                tz = \"US/Pacific\")  # What layers are in there? sf::st_layers(myDB) #> Driver: GPKG  #> Available layers: #>     layer_name geometry_type features fields              crs_name #> 1        fixes         Point      468     14 WGS 84 / UTM zone 11N #> 2 animal_fixes         Point      462     12 WGS 84 / UTM zone 11N #> 3      devices            NA       33      7                  <NA> #> 4      animals            NA        4      5                  <NA> #> 5  deployments            NA       20      6                  <NA> library(dplyr, quietly = TRUE) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2, quietly = TRUE)  points = sf::st_read(myDB, layer = \"animal_fixes\") #> Reading layer `animal_fixes' from data source  #>   `C:\\Users\\jweissman\\AppData\\Local\\Temp\\1\\RtmpklJetu\\example.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 462 features and 12 fields (with 160 geometries empty) #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 261780.2 ymin: 4173114 xmax: 267257.4 ymax: 4178607 #> Projected CRS: WGS 84 / UTM zone 11N  points %>%    ggplot2::ggplot() +    ggplot2::geom_sf(ggplot2::aes(fill = animal_id))"},{"path":"https://rgzn.github.io/beastr/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Better Environmental/Animal Sensor/Telemetry Repository","text":"ctmmweb [https://github.com/ctmm-initiative/ctmmweb] collardb [https://github.com/kissmygritts/collardb] amt [https://github.com/jmsigner/amt] movebank [https://www.movebank.org/]","code":""},{"path":"https://rgzn.github.io/beastr/index.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"Better Environmental/Animal Sensor/Telemetry Repository","text":"integrate amt (use amt tools) integrate movebank (export/import) add new readers new devices used use golem shiny app stuff","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rgzn.github.io/beastr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://rgzn.github.io/beastr/reference/append_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new records to existing database — append_database","title":"Add new records to existing database — append_database","text":"Add new records existing database","code":""},{"path":"https://rgzn.github.io/beastr/reference/append_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new records to existing database — append_database","text":"","code":"append_database(   dsn,   fix_files = NULL,   device_files = NULL,   animal_files = NULL,   deployment_files = NULL )"},{"path":"https://rgzn.github.io/beastr/reference/append_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new records to existing database — append_database","text":"dsn path database file created. Currently must .gpkg file. fix_files path, paths, files telemetry fixes. device_files path, paths, CSV files containing information telemetry devices used. must include `ID` column. animal_files path, paths, CSV files containing information animals devices deployed. must include `ID` column. deployment_files path, paths, CSV files specifying devices deployed animals . Columns must include: `AnimalID`, `DeviceID`, `In_Service`, `Out_Service`.","code":""},{"path":"https://rgzn.github.io/beastr/reference/append_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new records to existing database — append_database","text":"[append_database()] returns `TRUE`, invisibly.","code":""},{"path":"https://rgzn.github.io/beastr/reference/append_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert rows into a spatial database — append_layer","title":"Insert rows into a spatial database — append_layer","text":"`append_layer()` method assumes data source already layer format new data. can work either spatial non-spatial data. use `sf::st_write()` instead `DBI::dbAppendTable()` order handle spatial data.","code":""},{"path":"https://rgzn.github.io/beastr/reference/append_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert rows into a spatial database — append_layer","text":"","code":"append_layer(data, dsn, layer, id_fields = NULL)"},{"path":"https://rgzn.github.io/beastr/reference/append_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert rows into a spatial database — append_layer","text":"data tibble data frame write database. column names must consistent target layer. dsn data source name. Typically path geopackage. layer layer name append. id_fields names field join new data. fields determine whether row unique using`dplyr::anti_join()`","code":""},{"path":"https://rgzn.github.io/beastr/reference/beastr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"beastr: Better Environmental/Animal Sensor/Telemetry Repository — beastr-package","title":"beastr: Better Environmental/Animal Sensor/Telemetry Repository — beastr-package","text":"Manage wildlife telemetry data. package provides infrastructure needed manage wildlife telemetry data. functions read raw data, build database links sensor data animals, filter bad data, basic analyses, export data use applications.","code":""},{"path":[]},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct geopackage sqlite database from raw data — build_database","title":"Construct geopackage sqlite database from raw data — build_database","text":"Construct geopackage sqlite database raw data","code":""},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct geopackage sqlite database from raw data — build_database","text":"","code":"build_database(   fix_files,   device_files,   animal_files,   deployment_files,   dsn = \"~/beastr_db.gpkg\",   delete_dsn = TRUE,   locale = NULL,   tz = NULL,   quiet = TRUE )"},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct geopackage sqlite database from raw data — build_database","text":"fix_files path, paths, files telemetry fixes. device_files path, paths, CSV files containing information telemetry devices used. must include `ID` column. animal_files path, paths, CSV files containing information animals devices deployed. must include `ID` column. deployment_files path, paths, CSV files specifying devices deployed animals . Columns must include: `AnimalID`, `DeviceID`, `In_Service`, `Out_Service`. dsn path database file created. Currently must .gpkg file. delete_dsn TRUE, remove existing dsn. locale Specify time zone using locale object. See [readr::locale()] tz Specify time zone using known character string. ie \"US/Pacific\" quiet Boolean passed `sf::st_write()`","code":""},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct geopackage sqlite database from raw data — build_database","text":"[build_database()] returns `TRUE`, invisibly.","code":""},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct geopackage sqlite database from raw data — build_database","text":"takes input files describing animals, devices, deployments, data files, constructs geopackage","code":""},{"path":"https://rgzn.github.io/beastr/reference/build_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct geopackage sqlite database from raw data — build_database","text":"","code":"if (FALSE) {  fix_file = system.file(\"inst/lotek/PinPoint33452.txt\", package = \"beastr\")  device_file = system.file(\"inst/deployment/devices.csv\", package = \"beastr\")  animal_file = system.file(\"inst/deployment/animals.csv\", package = \"beastr\")  deploy_file = system.file(\"inst/deployment/deployments.csv\", package = \"beastr\")  myDB = paste0(tempdir(check = TRUE), \"/\", \"example.gpkg\")  myDB = normalizePath(myDB) # windows?  build_database(fix_files = fix_file,  device_files = device_file,  animal_files = animal_file,  deployment_files = deploy_file,  dsn = myDB,  tz = \"US/Pacific\")  sf::st_layers(myDB) }"},{"path":"https://rgzn.github.io/beastr/reference/get_animal_fixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fixes tied to animals rather than devices — get_animal_fixes","title":"Get fixes tied to animals rather than devices — get_animal_fixes","text":"Get fixes tied animals rather devices","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_animal_fixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fixes tied to animals rather than devices — get_animal_fixes","text":"","code":"get_animal_fixes(dsn)"},{"path":"https://rgzn.github.io/beastr/reference/get_animal_fixes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fixes tied to animals rather than devices — get_animal_fixes","text":"dsn Path database","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_animal_fixes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fixes tied to animals rather than devices — get_animal_fixes","text":"sf POINT collection","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_animal_fixes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get fixes tied to animals rather than devices — get_animal_fixes","text":"wrapper `sf::st_read()`. Helps simplify code.","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Add elevation column for an sf POINT collection. — get_elevation_dem","title":"Add elevation column for an sf POINT collection. — get_elevation_dem","text":"Add elevation column sf POINT collection.","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add elevation column for an sf POINT collection. — get_elevation_dem","text":"","code":"get_elevation_dem(df, dem_src, units = \"meters\")"},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add elevation column for an sf POINT collection. — get_elevation_dem","text":"df SFC POINT geometries dem_src path Digital Elevation Model file. must raster file, usually .tif units TODO: currently assumes units meters.","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add elevation column for an sf POINT collection. — get_elevation_dem","text":"","code":"if (FALSE) { dem_src = \"USGS_13_n38w120_20210701.tif\" myDB = system.file(\"db/telemetry.gpkg\", package = \"beastr\") }"},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Get difference between DEM raster and elevation column in an sfc — get_elevation_difference","title":"Get difference between DEM raster and elevation column in an sfc — get_elevation_difference","text":"Get difference DEM raster elevation column sfc","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get difference between DEM raster and elevation column in an sfc — get_elevation_difference","text":"","code":"get_elevation_difference(   df,   dem_src,   elev_field = elevation_gps,   geom_field = geom )"},{"path":"https://rgzn.github.io/beastr/reference/get_elevation_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get difference between DEM raster and elevation column in an sfc — get_elevation_difference","text":"df spatial datagram elevation column dem_src path Digital Elevation Model file. must raster file, usually .tif elev_field Existing elevation column `df` geom_field name geometry column df","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_id_from_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the id info from a lotek filename — get_id_from_filename","title":"Extract the id info from a lotek filename — get_id_from_filename","text":"Extract id info lotek filename","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_id_from_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the id info from a lotek filename — get_id_from_filename","text":"","code":"get_id_from_filename(path)"},{"path":"https://rgzn.github.io/beastr/reference/get_id_from_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the id info from a lotek filename — get_id_from_filename","text":"path path filename lotek data file.","code":""},{"path":"https://rgzn.github.io/beastr/reference/get_id_from_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the id info from a lotek filename — get_id_from_filename","text":"characters device id","code":""},{"path":"https://rgzn.github.io/beastr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rgzn.github.io/beastr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rgzn.github.io/beastr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rgzn.github.io/beastr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_delims_w_uids.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a list of delimited text files that have a unique ID field.\r\nUse this field to pick only distinct entries. — read_delims_w_uids","title":"Read a list of delimited text files that have a unique ID field.\r\nUse this field to pick only distinct entries. — read_delims_w_uids","text":"Read list delimited text files unique ID field. Use field pick distinct entries.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_delims_w_uids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a list of delimited text files that have a unique ID field.\r\nUse this field to pick only distinct entries. — read_delims_w_uids","text":"","code":"read_delims_w_uids(input_files, id_field = ID, show_col_types = FALSE)"},{"path":"https://rgzn.github.io/beastr/reference/read_delims_w_uids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a list of delimited text files that have a unique ID field.\r\nUse this field to pick only distinct entries. — read_delims_w_uids","text":"input_files single filename list filenames. delimited text files share column name unique identifier id_field column/field name unique identifier. Defaults \"ID\"","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Lotek gps txt files into a spatial dataframe. — read_lotek","title":"Read Lotek gps txt files into a spatial dataframe. — read_lotek","text":"function takes one lotek txt files turns sf collection points. multiple versions fix record, duplicates removed default. duplicate recent file kept.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Lotek gps txt files into a spatial dataframe. — read_lotek","text":"","code":"read_lotek(files, ids = NULL, remove_duplicates = TRUE, show_col_types = FALSE)"},{"path":"https://rgzn.github.io/beastr/reference/read_lotek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Lotek gps txt files into a spatial dataframe. — read_lotek","text":"files Input files. can path single file, character vector paths multiple files, list paths multiple files. ids device id #s. default comes filename. Note shiny file input change filenames, field must used case. remove_duplicates `FALSE`, duplicate records included output show_col_types Passed readr functions. Useful debugging. input_crs reference system used interpreting coords file output_crs reference system output spatial df tz timezone string convert timezone processing","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Lotek gps txt files into a spatial dataframe. — read_lotek","text":"","code":"points = read_lotek(system.file(\"lotek/PinPoint33452.txt\", package=\"beastr\")) summary(points) #>   device_id             Index          Status              Sats           #>  Length:468         Min.   :  1.0   Length:468         Length:468         #>  Class :character   1st Qu.:117.8   Class :character   Class :character   #>  Mode  :character   Median :234.5   Mode  :character   Mode  :character   #>                     Mean   :234.5                                         #>                     3rd Qu.:351.2                                         #>                     Max.   :468.0                                         #>                                                                           #>    RTC-date           RTC-time          FIX-date           FIX-time        #>  Length:468         Length:468        Length:468         Length:468        #>  Class :character   Class1:hms        Class :character   Class1:hms        #>  Mode  :character   Class2:difftime   Mode  :character   Class2:difftime   #>                     Mode  :numeric                       Mode  :numeric    #>                                                                            #>                                                                            #>                                                                            #>     Delta(s)       Altitude(m)        HDOP              eRes        #>  Min.   :-8.321   Min.   :1306   Min.   :  1.100   Min.   :0.0000   #>  1st Qu.:-2.788   1st Qu.:1856   1st Qu.:  1.975   1st Qu.:0.1000   #>  Median :-1.806   Median :2153   Median :  3.000   Median :0.3000   #>  Mean   :-1.862   Mean   :2018   Mean   :  7.805   Mean   :0.7391   #>  3rd Qu.:-1.013   3rd Qu.:2190   3rd Qu.:  5.575   3rd Qu.:1.0000   #>  Max.   : 1.412   Max.   :2271   Max.   :285.000   Max.   :5.6000   #>                   NA's   :164    NA's   :164       NA's   :164      #>  Temperature(C)    Voltage(V)     Ingest_Time                  #>  Min.   : 0.00   Min.   :3.750   Min.   :2022-05-09 10:46:13   #>  1st Qu.:16.50   1st Qu.:3.800   1st Qu.:2022-05-09 10:46:13   #>  Median :20.50   Median :3.800   Median :2022-05-09 10:46:13   #>  Mean   :22.57   Mean   :3.821   Mean   :2022-05-09 10:46:13   #>  3rd Qu.:32.00   3rd Qu.:3.850   3rd Qu.:2022-05-09 10:46:13   #>  Max.   :38.00   Max.   :3.850   Max.   :2022-05-09 10:46:13   #>                                                                #>           geometry        time                     #>  POINT        :468   Min.   :2021-11-23 21:38:46   #>  epsg:32611   :  0   1st Qu.:2021-11-26 16:41:47   #>  +proj=utm ...:  0   Median :2021-11-28 22:08:06   #>                      Mean   :2021-11-29 01:05:06   #>                      3rd Qu.:2021-11-30 22:19:23   #>                      Max.   :2021-12-08 21:00:16   #>"},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_2_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read single Lotek gps txt file into a spatial dataframe. — read_lotek_2_sf","title":"Read single Lotek gps txt file into a spatial dataframe. — read_lotek_2_sf","text":"function takes fixed-width delimited lotek txt file turns sf collection points.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_2_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read single Lotek gps txt file into a spatial dataframe. — read_lotek_2_sf","text":"","code":"read_lotek_2_sf(   filename,   id = NULL,   input_crs = 4326,   output_crs = 32611,   tz = \"UTC\",   ingest_time = NA,   show_col_types = FALSE )"},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_2_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read single Lotek gps txt file into a spatial dataframe. — read_lotek_2_sf","text":"filename lotek fixed width text file listing fixes collar filename assumed standard lotek format, device id. id device id #. default comes filename input_crs reference system used interpreting coords file output_crs reference system output spatial df tz timezone string convert timezone processing ``","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more lotek activity text files — read_lotek_activity","title":"Read one or more lotek activity text files — read_lotek_activity","text":"record contained multiple files, duplicates removed. happens device multiple downloads overlapping timespans. Note data spatial, may linked corresponding spatial data `device_id` `time`.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more lotek activity text files — read_lotek_activity","text":"","code":"read_lotek_activity(files)"},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more lotek activity text files — read_lotek_activity","text":"files File paths, either single file path list/vector multiple paths. point lotek activity .csv files, really true CSVs.","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more lotek activity text files — read_lotek_activity","text":"","code":"activity_files = system.file(\"lotek/activity.csv\", package=\"beastr\") activity = read_lotek_activity(activity_files) #> Error: '' does not exist in current working directory ('C:/Users/jweissman/Documents/beastr/docs/reference')."},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read single lotek activity 'csv' with header — read_lotek_activity_txt","title":"Read single lotek activity 'csv' with header — read_lotek_activity_txt","text":"Read single lotek activity 'csv' header","code":""},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read single lotek activity 'csv' with header — read_lotek_activity_txt","text":"","code":"read_lotek_activity_txt(filename, show_col_types = FALSE)"},{"path":"https://rgzn.github.io/beastr/reference/read_lotek_activity_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read single lotek activity 'csv' with header — read_lotek_activity_txt","text":"filename path single lotek activity text file. point lotek activity .csv files, really true CSVs. show_col_types Passed [`readr`] functions. Useful debugging.","code":""},{"path":"https://rgzn.github.io/beastr/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute speed from gps telemetry data — speed","title":"Compute speed from gps telemetry data — speed","text":"Compute speed gps telemetry data","code":""},{"path":"https://rgzn.github.io/beastr/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute speed from gps telemetry data — speed","text":"","code":"speed(   df,   id_field = animal_id,   leadlagfun = dplyr::lead,   time_field = time,   geom_field = geom )"},{"path":"https://rgzn.github.io/beastr/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute speed from gps telemetry data — speed","text":"df Object must also time column returns vector,  used dplyr::mutate","code":""}]
